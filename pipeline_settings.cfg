#
# This is an exemplary pipeline-settings.cfg file. 
# It contains configuration entries for the genotyping pipeline.
#
#
# author: Pawel Sztromwasser
#



#
# Pipeline inputs
#

[Inputs]

# The pipeline can start from 3 different places, which is determined by uncommenting one (and only one) of the options:
# 1) Input run-dir if the pipeline should start from bcl2fastq conversion. 
#    The path should be absolute. The directory is expected to contain SampleSheet.csv file - the input to bcl2fastq.
#run-directory:	/path/to/RUN_ID
#
# 2) Path (GLOB expression) describing location of paired FASTQ files (relative to scratch-root). 
#    Multiple lanes per sample are supported; see pipeline code for the expected naming convention.
#    In dockerized execution mode the path is resolved relative to results-archive. In regular execution mode paths should be absolute. 
#input-fastqs:	/path/to/data/my-project/*.fq.gz
#
# 3) Path (GLOB expression) describing location of raw BAM files. 
#    In dockerized execution mode the path is resolved relative to results-archive. In regular execution mode paths should be absolute. 
input-bams: 	/cluster/shared/bioinformatics/src/genotyping_pipeline_devel/test-data/trio_wes_chr22/*.bam

# Path (GLOB expression) specifing external .gvcf files to jointy call with the inputs above. 
# In dockerized execution mode the paths are resolved relative to results-archive. In regular execution mode paths should be absolute. 
#call-with-gvcfs: */*.multisample.gvcf


#
# Root paths
#

[Paths]

# Root paths for working directory (scratch) and for reference data. Absolute paths must be provided. If scratch-root is unset, current working directory is used.
# When pipeline starts from bcl2fastq conversion (run_folder is set), scratch-root/RUN_ID (where RUN_ID is the same as in run_directory) is created and used as run's working directory. 
# When pipeline starts from FASTQ or BAM files, the scratch-root folder is used as a working directory.
# In dockerized mode:
# 1) reference-root will be mounted by docker containers with read-only access
# 2) run's working directory (scratch-root or scratch-root/RUN_ID) will be mounted with RW access
# 3) paths specified in sections Inputs and Resources will be resolved with respect to these root directories.
# In regular execution mode:
# 1) paths specified in Resources section will be resolved with respect to the reference-root directory.
reference-root:	    /cluster/shared/bioinformatics/reference-data/b37
scratch-root:       /cluster/shared/bioinformatics/src/genotyping_pipeline_devel/test-results/trio_wes_chr22

# Optional results- and fastq-archive root directories. Absolute paths must be provided.
# In dockerized mode, these are mounted to docker containers with RO (writing happens outside docker containers).
# If these directories are not set, the fastq and/or gatk.bam, exome.vcf, and multisample.gvcf are not archived outside the working (scratch) directory.
# Also, in dockerized mode, the location of external gvcf files (see Inputs) is resolved relative to the results-archive. 
# If results archive is not provided, the external gvcfs will not be found.
#results-archive:    /tsd/pXX/data/colossus/archived_results
#fastq-archive:      /tsd/pXX/data/colossus/archived_fastq


# Large-capacity tmp directory (if should be different than /tmp). 
# In dockerized mode it will be mounted to a docker container and used as tmp. 
# If commented out, the /tmp of the docker container is used.
# tmp-directory:		/tmp




#
# Docker settings
#
 
[Docker] 

# Other docker settings
#docker-binary:		docker
#docker-args:		run --rm



#
# Resources (databases, files)
# NOTE: Paths relative to root-reference
#

[Resources]
reference-genome: 		GATK2.8/human_g1k_v37_decoy.fasta
dbsnp-vcf: 			GATK2.8/dbsnp_138.b37.vcf
hapmap-vcf: 			GATK2.8/hapmap_3.3.b37.vcf
1000genomes-omni-vcf:		GATK2.8/1000G_omni2.5.b37.vcf 
1000genomes-snps-vcf: 		GATK2.8/1000G_phase1.snps.high_confidence.b37.vcf
1000genomes-indels-vcf: 	GATK2.8/1000G_phase1.indels.b37.vcf
mills-indels-vcf: 		GATK2.8/Mills_and_1000G_gold_standard.indels.b37.vcf

# used for trimming
adapters-fasta:                 adapters/TruSeq3-PE-2.fa


# bed files with capture regions used in coverage statistics calculations
capture-regions-bed: 			intervals/Nimblegen_SeqCap_EZ_Exome_v3/Nimblegen_SeqCap_EZ_Exome_v3_b37_targetRegOnly.bed
capture-regions-bed-for-qualimap:       NOT_USED.TO_CREATE_ADD_THREE_MOCK_COLUMNS_TO_THE_ABOVE_FILE

# bed file with expanded capture regions to include surrounded and covered, although not targeted bases. Used in filtering variants 
exome-regions-bed:                      intervals/Nimblegen_SeqCap_EZ_Exome_v3/Nimblegen_SeqCap_EZ_Exome_v3_b37_targetRegOnly_with_10bp_flanks.bed

# gene coordinates for calculating gene coverage
gene-coordinates:			ucsc_tracks/ccds_exons.GRCh37.gatk_format						



[Tools]

# Depending on the execution mode (dockerized or regular) the tool's definition should be provided in appropriate format. 
# For dockerized execution provide docker image name/ID, its version, and executable that should be run inside. 
# Exemplary settings below use "dpipe" image repository, and latest version of the image for each tool (NOTE: best practice is to use exact versioning).
# {args} and {interpreter_args} are place-holders for tool/execution arguments and interpreter arguments (such as -XmX4G in Java). 
# Detailed examples can be found in the pipeline source code: function run_cmd.
#

#bcl2fastq:				dpipe/bcl2fastq:latest bcl2fastq {args}
#trimmomatic:				dpipe/trimmomatic:latest trimmomatic {args} {interpreter_args}
#bwa:					dpipe/bwa_samtools:latest bwa_pipe.sh {args}
#samtools:				dpipe/bwa_samtools:latest samtools {args}
#picard-tools: 				dpipe/picard:latest picard {args} {interpreter_args} 
#gatk: 					dpipe/gatk:latest gatk {args} {interpreter_args}
## QualiMap is currently not supported in dockerized execution (image has not been created) 
#qualimap: 				dpipe/qualimap:latest qualimap {args} {interpreter_args}

# In regular execution mode (when docker binary setting is commented-out), the path to the tool's executable should be given, 
# or an interpreter (java/python/perl) together with the path to the tool. 
# Similarly as in tool descriptions above, {args} and {interpreter_args} are place-holders for the respective arguments.
#
#
bcl2fastq:				PATH/TO/bcl2fastq {args}
trimmomatic:				/usr/java/default/bin/java {interpreter_args} -jar /cluster/shared/bioinformatics/src/Trimmomatic-0.33/trimmomatic-0.33.jar {args}
bwa:					/cluster/shared/bioinformatics/src/bwa-0.7.12/bwa {args}
samtools:				/cluster/shared/bioinformatics/src/samtools-1.2/samtools {args}
picard-tools: 				/usr/java/default/bin/java {interpreter_args} -jar /cluster/shared/bioinformatics/src/picard-tools-1.129/picard.jar {args}  
gatk: 					/usr/java/default/bin/java {interpreter_args} -jar /cluster/shared/bioinformatics/src/GenomeAnalysisTK-3.4-46/GenomeAnalysisTK.jar {args}
qualimap: 				/usr/java/default/bin/java {interpreter_args} -jar PATH/TO/Qualimap.jar {args}


[Other]

tsd-account:				p11

